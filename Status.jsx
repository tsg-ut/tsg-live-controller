const React = require('react');
const sumBy = require('lodash/sumBy');
const sum = require('lodash/sum');

require('@babel/polyfill');
require('core-js/stage/4');
require('core-js/stage/3');
require('core-js/stage/2');
require('core-js/stage/1');

require('./Status.pcss');

const socket = global.io();
socket.on('connect', () => {
	console.log('websocket connected');
});

module.exports = class App extends React.Component {
	constructor(props) {
		super(props);

		this.state = {
			solves: [[], []],
			scores: [0, 0],
			mode: this.getMode(),
		};

		this.initialize();
	}

	getMode() {
		if (location.pathname === '/ctf.html') {
			return 'ctf';
		}
		if (location.pathname === '/ai.html') {
			return 'ai';
		}
		if (location.pathname === '/procon.html') {
			return 'procon';
		}
		return null;
	}

	initialize() {
		if (this.getMode() === 'ctf') {
			socket.on('ctf-heartbeat', async (data) => {
				console.log(data);
				this.setState({
					solves: data.solves,
				});
			});
		}
		if (this.getMode() === 'ai') {
			socket.on('ai-heartbeat', async (data) => {
				console.log(data);
				this.setState({
					scores: data.scores,
				});
			});
		}
		// if (this.getMode() === 'procon') {
		// 	socket.on('hackerrank-heartbeat', async (data) => {
		// 		console.log(data);
		// 		this.setState({
		// 			solves: data.solves,
		// 		});
		// 	});
		// }
	}

	getScore(chals) {
		return sum(chals.map((chal) => {
			const score = {A: 100, B: 200, C: 300, D: 400, E: 500, F: 600, G: 700}[chal];
			return score || 0;
		}));
	}

	render() {
		return (
			<svg className={`app ${this.state.mode}`} viewBox="0 0 353.079 176.376" height="117.584mm" width="235.386mm">
				{this.state.mode === 'ctf' && this.state.solves.map((teamSolves, index) => {
					const id = ["", "100-0", "150-0", "150-1", "200-0", "50-0", "100-1", "400-0", "200-1", "100-0", "200-0", "", "400-0"];
					const pathes = [
						[
							"",
							"M 81.249533,1.4433227 71.249625,7.2171305 V 18.763712 l 9.999908,5.773808 10.000422,-5.773808 9.999905,5.773808 9.99991,-5.773808 V 7.2171305 l -9.99991,-5.7738078 -9.999905,5.7738078 z",
							"m 51.24982,18.763906 -9.99991,5.773291 v 11.547099 l 9.99991,5.773291 v 0.30179 l 5.3e-4,5.29e-4 -5.3e-4,11.245308 10.00042,5.77329 9.99939,-5.77329 5.3e-4,-11.547098 9.99939,-5.773808 V 24.537714 l -9.99992,-5.773808 -9.99991,5.773808 c -3.33244,-1.924958 -6.66662,-3.849391 -9.9999,-5.773808 z",
							"M 51.24949,76.499055 61.2494,70.725764 V 59.178666 l -9.99991,-5.773291 v -0.301791 l -5.3e-4,-5.29e-4 5.3e-4,-11.245307 -10.00042,-5.773291 -9.99939,5.773291 -5.3e-4,11.547098 -9.99939,5.773807 v 11.546594 l 9.99992,5.773808 9.99991,-5.773808 c 3.33244,1.924958 6.66662,3.849391 9.9999,5.773808 z",
							"m 21.249813,70.725397 -9.999907,5.773809 v 11.54658 l -9.9999059,5.773809 v 11.546585 l 9.9999059,5.7738 10.000423,-5.7738 9.999907,5.7738 9.999906,-5.7738 V 93.819595 l 9.999907,-5.773809 v -11.54658 l -9.999907,-5.773809 -9.999906,5.773809 z",
							"m 71.249759,7.2168779 0,11.5470051 -9.999999,5.773502 -10,-5.773502 0,-11.547005 10,-5.7735024 z",
							"m 121.24967,1.4433227 -9.99991,5.7738078 V 18.763712 l 9.99991,5.773808 10.00042,-5.773808 9.9999,5.773808 9.99991,-5.773808 V 7.2171305 l -9.99991,-5.7738078 -9.9999,5.7738078 z",
							"M 91.249955,18.763712 81.249533,24.53752 v 11.547098 l -9.999908,5.773809 v 11.54658 L 61.249719,59.1783 v 11.547097 l 9.999906,5.773293 9.999908,-5.773293 10.000422,5.773293 9.999905,-5.773293 V 59.178816 l 9.99991,-5.77329 9.9999,5.77329 10.00043,-5.77329 V 41.858427 c 3.33096,-1.9246 6.66683,-3.849611 9.9999,-5.773809 V 24.53752 l -10.00042,-5.773808 -9.99991,5.773808 -9.9999,-5.773808 -9.99991,5.773808 z",
							"m 61.249439,70.725397 -9.999906,5.773809 v 11.54658 l -9.999908,5.773809 v 11.546585 l 9.999908,5.7738 10.000422,-5.7738 9.999905,5.7738 9.999906,-5.7738 V 93.819595 l 9.999909,-5.773809 v -11.54658 l -9.999909,-5.773809 -9.999906,5.773809 z",
							"M 81.249533,1.4433227 71.249625,7.2171305 V 18.763712 l 9.999908,5.773808 10.000422,-5.773808 9.999905,5.773808 9.99991,-5.773808 V 7.2171305 l -9.99991,-5.7738078 -9.999905,5.7738078 z",
							"m 21.249813,70.725397 -9.999907,5.773809 v 11.54658 l -9.9999059,5.773809 v 11.546585 l 9.9999059,5.7738 10.000423,-5.7738 9.999907,5.7738 9.999906,-5.7738 V 93.819595 l 9.999907,-5.773809 v -11.54658 l -9.999907,-5.773809 -9.999906,5.773809 z",
							"",
							"M 91.249955,18.763712 81.249533,24.53752 v 11.547098 l -9.999908,5.773809 v 11.54658 L 61.249719,59.1783 v 11.547097 l 9.999906,5.773293 9.999908,-5.773293 10.000422,5.773293 9.999905,-5.773293 V 59.178816 l 9.99991,-5.77329 9.9999,5.77329 10.00043,-5.77329 V 41.858427 c 3.33096,-1.9246 6.66683,-3.849611 9.9999,-5.773809 V 24.53752 l -10.00042,-5.773808 -9.99991,5.773808 -9.9999,-5.773808 -9.99991,5.773808 z",
						],
						[
							"",
							"m 154.13637,116.14006 9.99991,-5.77381 V 98.81967 l -9.99991,-5.773813 -10.00042,5.773813 -9.99991,-5.773813 -9.99991,5.773813 v 11.54658 l 9.99991,5.77381 9.99991,-5.77381 z",
							"m 184.13608,98.81947 9.99991,-5.77329 V 81.499081 L 184.13608,75.72579 V 75.424 l -5.3e-4,-5.29e-4 5.3e-4,-11.245308 -10.00042,-5.77329 -9.99939,5.77329 -5.3e-4,11.547098 -9.99939,5.773808 v 11.546594 l 9.99992,5.773807 9.99991,-5.773807 c 3.33244,1.924958 6.66662,3.849387 9.9999,5.773807 z",
							"m 184.13641,41.084322 -9.99991,5.773291 v 11.547098 l 9.99991,5.773291 v 0.301791 l 5.3e-4,5.29e-4 -5.3e-4,11.245307 10.00042,5.773291 9.99939,-5.773291 5.3e-4,-11.547098 9.99939,-5.773807 V 46.85813 l -9.99992,-5.773808 -9.99991,5.773808 c -3.33244,-1.924958 -6.66662,-3.849391 -9.9999,-5.773808 z",
							"m 214.13609,46.85798 9.9999,-5.773809 v -11.54658 l 9.99991,-5.773809 V 12.217198 l -9.99991,-5.7738003 -10.00042,5.7738003 -9.99991,-5.7738003 -9.9999,5.7738003 v 11.546584 l -9.99991,5.773809 v 11.54658 l 9.99991,5.773809 9.9999,-5.773809 z",
							"m 164.13614,110.36649 0,-11.547005 10,-5.773503 10,5.773503 0,11.547005 -10,5.7735 z",
							"m 114.13623,116.14006 9.99991,-5.77381 V 98.81967 l -9.99991,-5.773813 -10.00042,5.773813 -9.9999,-5.773813 -9.99991,5.773813 v 11.54658 l 9.99991,5.77381 9.9999,-5.77381 z",
							"m 144.13595,98.81967 10.00042,-5.773813 V 81.498759 l 9.99991,-5.773809 V 64.17837 l 9.9999,-5.773293 V 46.85798 l -9.9999,-5.773293 -9.99991,5.773293 -10.00042,-5.773293 -9.99991,5.773293 v 11.546581 l -9.99991,5.77329 -9.9999,-5.77329 -10.00043,5.77329 V 75.72495 c -3.33096,1.9246 -6.66683,3.849611 -9.9999,5.773809 v 11.547098 l 10.00042,5.773813 9.99991,-5.773813 9.9999,5.773813 9.99991,-5.773813 z",
							"m 174.13646,46.85798 9.99991,-5.773809 v -11.54658 l 9.99991,-5.773809 V 12.217198 l -9.99991,-5.7738003 -10.00042,5.7738003 -9.99991,-5.7738003 -9.99991,5.7738003 v 11.546584 l -9.99991,5.773809 v 11.54658 l 9.99991,5.773809 9.99991,-5.773809 z",
							"m 114.13623,116.14006 9.99991,-5.77381 V 98.81967 l -9.99991,-5.773813 -10.00042,5.773813 -9.9999,-5.773813 -9.99991,5.773813 v 11.54658 l 9.99991,5.77381 9.9999,-5.77381 z",
							"m 214.13609,46.85798 9.9999,-5.773809 v -11.54658 l 9.99991,-5.773809 V 12.217198 l -9.99991,-5.7738003 -10.00042,5.7738003 -9.99991,-5.7738003 -9.9999,5.7738003 v 11.546584 l -9.99991,5.773809 v 11.54658 l 9.99991,5.773809 9.9999,-5.773809 z",
							"",
							"m 144.13595,98.81967 10.00042,-5.773813 V 81.498759 l 9.99991,-5.773809 V 64.17837 l 9.9999,-5.773293 V 46.85798 l -9.9999,-5.773293 -9.99991,5.773293 -10.00042,-5.773293 -9.99991,5.773293 v 11.546581 l -9.99991,5.77329 -9.9999,-5.77329 -10.00043,5.77329 V 75.72495 c -3.33096,1.9246 -6.66683,3.849611 -9.9999,5.773809 v 11.547098 l 10.00042,5.773813 9.99991,-5.773813 9.9999,5.773813 9.99991,-5.773813 z",
						],
					];

					const chunks = [
						[11],
						[5],
						[1, 6, 9],
						[2, 3],
						[4, 8, 10],
						[7, 12],
					];
					
					const challengeIds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

					const score = sumBy(teamSolves, (solve) => (
						[1, 50, 100, 150, 200, 400][chunks.findIndex((chunk) => chunk.includes(solve))]
					));

					return (
						<g className={`team ${index === 0 ? 'blue' : 'red'}`} align={`${index === 0 ? 'left' : 'right'}`} transform={`translate(30, 30)`}>
							{index === 0 ? <text className="solve" transform={`translate(75, -5)`} textAnchor="end">{score}</text> : <text/>}
							{challengeIds.map((cid) => (
								<path id={`${id[index][cid]}`} className={`challenge ${teamSolves.includes(cid) ? "active" : ""}`} d={`${pathes[index][cid]}`}/>
							))}
							{index === 0 ? <text/> : <text className="solve" transform={`translate(200, 145)`} textAnchor="end">{score}</text>}
						</g>
					)
				})}
				{this.state.mode === 'ai' && this.state.scores.map((score, index) => (
					<div key={index} className={`team ${index === 0 ? 'red' : 'blue'}`}>
						<div className="score">{new Intl.NumberFormat('en-US').format(score)}</div>
						<div className="bar" style={{
							width: `${50 + (score < Math.max(...this.state.scores) ? -1 : 1) * Math.log10(Math.abs(this.state.scores[0] - this.state.scores[1]) + 1) / Math.log10(1e13 + 1) * 50}%`,
						}}/>
					</div>
				))}
				{this.state.mode === 'procon' && this.state.solves.map((chals, index) => (
					<div key={index} className={`team ${index === 0 ? 'red' : 'blue'}`}>
						{[['A', 'B', 'C'], ['D', 'E'], ['F', 'G']].map((ids, idsIndex) => (
							<div key={idsIndex} className="row">
								{ids.map((id, idIndex) => (
									<div key={idIndex} className={`cell ${chals.includes(id) ? 'solved' : ''}`}>
										{id}
									</div>
								))}
							</div>
						))}
						<div className="row score">{this.getScore(chals)}</div>
					</div>
				))}
			</svg>
		);
	}
};
